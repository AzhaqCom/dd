/**
 * Service de G√©n√©ration Proc√©durale de Contenu
 * 
 * Ce service g√®re la cr√©ation dynamique de contenu de jeu bas√© sur des templates
 * et le contexte actuel du joueur.
 */

import { SCENE_TYPES, PROCEDURAL_TYPES } from '../types/story.js';
import { SceneTemplates } from '../data/procedural/templates.js';
import { enemyTemplates } from '../data/enemies.js';

export class ProceduralGenerator {
  
  /**
   * G√©n√®re une sc√®ne compl√®te bas√©e sur un template et un contexte
   * @param {string} templateKey - Cl√© du template √† utiliser
   * @param {object} context - Contexte de g√©n√©ration (niveau joueur, biome, etc.)
   * @returns {object} Sc√®ne g√©n√©r√©e conforme au UnifiedSceneSchema
   */
  static generateScene(templateKey, context = {}) {
    console.log(`üîç Recherche du template: "${templateKey}"`);
    console.log(`üìã Templates disponibles:`, Object.keys(SceneTemplates));
    
    // ‚úÖ GESTION SP√âCIALE: Templates virtuels qui n'existent pas physiquement
    if (templateKey === 'random_encounter') {
      console.log(`üé≤ Template virtuel d√©tect√©: ${templateKey} - g√©n√©ration directe`);
      return this.generateRandomEncounterScene(context);
    }
    
    if (templateKey === 'combat_victory') {
      console.log(`üèÜ Template de victoire d√©tect√©: ${templateKey} - sc√®ne d√©j√† g√©n√©r√©e`);
      // Cette sc√®ne est d√©j√† g√©n√©r√©e et stock√©e, on ne devrait jamais arriver ici
      // Mais au cas o√π, retourner une sc√®ne d'erreur informative
      return {
        id: 'proc_combat_victory_error',
        type: SCENE_TYPES.TEXT,
        content: {
          title: '‚ö†Ô∏è Erreur de Victoire',
          text: 'La sc√®ne de victoire devrait √™tre pr√©-g√©n√©r√©e. Si vous voyez ceci, contactez le d√©veloppeur.'
        },
        choices: [{
          text: 'Continuer quand m√™me',
          next: 'continue_journey'
        }]
      };
    }
    
    const template = SceneTemplates[templateKey];
    if (!template) {
      console.error(`‚ùå Template '${templateKey}' introuvable dans:`, Object.keys(SceneTemplates));
      return this.generateErrorScene(templateKey);
    }
    
    console.log(`‚úÖ Template trouv√©: "${templateKey}"`);

    // G√©n√©rer un seed unique pour cette sc√®ne
    const seed = this.generateSeed(templateKey, context);
    
    // S√©lectionner les √©l√©ments du template
    const selectedElements = this.selectTemplateElements(template, context, seed);
    
    // Construire la sc√®ne unifi√©e
    const scene = this.buildUnifiedScene(selectedElements, context, seed);
    
    // Ajouter les m√©tadonn√©es proc√©durales
    scene.generation = {
      template: templateKey,
      context: { ...context },
      variationSeed: seed,
      generatedAt: Date.now()
    };

    return scene;
  }

  /**
   * G√©n√®re une rencontre sp√©cifique selon le biome et la difficult√©
   * @param {string} biome - Type de biome (forest, dungeon, village, etc.)
   * @param {string} difficulty - Niveau de difficult√© (easy, medium, hard)
   * @returns {object} Rencontre g√©n√©r√©e
   */
  static generateEncounter(biome, difficulty = 'medium') {
    // Lister les templates qui existent vraiment
    const availableTemplates = Object.keys(SceneTemplates).filter(key => 
      key.includes(`${biome}_encounter_`)
    );
    
    console.log(`üéØ Templates disponibles pour ${biome}:`, availableTemplates);
    
    // Si aucun template pour ce biome, utiliser forest par d√©faut
    if (availableTemplates.length === 0) {
      console.warn(`‚ö†Ô∏è Aucun template pour ${biome}, utilisation de forest`);
      return this.generateEncounter('forest', difficulty);
    }
    
    // Choisir un template al√©atoirement parmi ceux qui existent
    const templateKey = this.selectRandom(availableTemplates);
    
    const context = {
      biome,
      difficulty,
      encounterType: templateKey.split('_')[2] // social, combat, discovery
    };

    return this.generateScene(templateKey, context);
  }

  /**
   * G√©n√®re un PNJ contextuel pour un lieu donn√©
   * @param {string} location - Lieu o√π appara√Æt le PNJ
   * @param {string} role - R√¥le du PNJ (merchant, guard, traveler, etc.)
   * @returns {object} Donn√©es du PNJ g√©n√©r√©
   */
  static generateNPC(location, role = 'random') {
    const npcTemplates = SceneTemplates.npcs?.[location] || SceneTemplates.npcs?.generic;
    
    if (!npcTemplates) {
      return this.generateGenericNPC(role);
    }

    const selectedTemplate = role === 'random' 
      ? this.selectRandom(npcTemplates)
      : npcTemplates.find(t => t.role === role) || this.selectRandom(npcTemplates);

    return {
      ...selectedTemplate,
      name: this.generateNPCName(),
      id: `npc_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      generatedAt: Date.now()
    };
  }

  /**
   * G√©n√®re du dialogue contextuel pour un PNJ
   * @param {object} npc - Donn√©es du PNJ
   * @param {object} playerContext - Contexte du joueur
   * @returns {array} Options de dialogue g√©n√©r√©es
   */
  static generateDialogue(npc, playerContext = {}) {
    const dialogueTemplates = SceneTemplates.dialogues?.[npc.role] || SceneTemplates.dialogues?.generic;
    
    if (!dialogueTemplates) {
      return this.generateGenericDialogue(npc);
    }

    // S√©lectionner les dialogues appropri√©s selon le contexte
    const relevantDialogues = dialogueTemplates.filter(dialogue => 
      this.isDialogueRelevant(dialogue, playerContext)
    );

    return relevantDialogues.length > 0 
      ? this.selectRandom(relevantDialogues)
      : this.generateGenericDialogue(npc);
  }

  /**
   * G√©n√®re un identifiant unique de sc√®ne proc√©durale
   * @param {string} type - Type de sc√®ne
   * @param {object} context - Contexte de g√©n√©ration
   * @returns {string} ID de sc√®ne proc√©durale
   */
  static generateProceduralSceneId(type, context = {}) {
    const timestamp = Date.now();
    const contextHash = this.hashContext(context);
    return `proc_${type}_${contextHash}_${timestamp}`;
  }

  /**
   * G√©n√®re une sc√®ne de combat compl√®te avec ennemis s√©lectionn√©s selon le CR
   * @param {string} encounterType - Type de rencontre (bandit_ambush, beast_attack, etc.)
   * @param {object} context - Contexte (biome, difficulty, surprise, etc.)
   * @returns {object} Sc√®ne de combat g√©n√©r√©e
   */
  static generateCombatScene(encounterType, context = {}) {
    console.log(`üó°Ô∏è G√©n√©ration combat: ${encounterType}`, context);
    
    // S√©lectionner les ennemis selon le biome et la difficult√©
    const enemies = this.selectEnemiesForEncounter(context);
    const enemyPositions = this.generateEnemyPositions(enemies.length);
    
    // G√©n√©rer le contenu narratif
    const narrativeContent = this.generateCombatNarrative(encounterType, context, enemies);
    
    // Calculer les r√©compenses
    const rewards = this.calculateCombatRewards(enemies, context);
    
    return {
      id: this.generateProceduralSceneId('combat', context),
      type: SCENE_TYPES.COMBAT,
      content: narrativeContent,
      // ‚úÖ Format attendu par EnemyFactory - Grouper les ennemis identiques
      enemies: this.groupEnemiesByType(enemies),
      enemyPositions: enemyPositions,
      choices: [{
        text: 'Commencer le combat'
      }],
      onVictory: {
        next: this.generatePostCombatSceneId(context),
        text: 'Victoire ! Vous fouillez le champ de bataille...',
        consequences: rewards,
        // G√©n√©rer directement la sc√®ne post-combat compl√®te
        generatedScene: this.generatePostCombatScene(context, rewards)
      },
      metadata: {
        chapter: 'procedural',
        location: context.biome || 'battlefield',
        tags: ['procedural_combat', encounterType, context.difficulty || 'medium'],
        environment: context.biome || 'wilderness'
      },
      generation: {
        template: encounterType,
        context: { ...context },
        enemies: enemies,
        generatedAt: Date.now()
      }
    };
  }

  /**
   * G√©n√®re une sc√®ne de texte narrative proc√©durale
   * @param {string} textType - Type de texte (exploration_result, dialogue_outcome, etc.)
   * @param {object} context - Contexte de g√©n√©ration
   * @returns {object} Sc√®ne TEXT g√©n√©r√©e
   */
  static generateTextScene(textType, context = {}) {
    console.log(`üìù G√©n√©ration texte: ${textType}`, context);
    
    const narrativeContent = this.generateTextNarrative(textType, context);
    const choices = this.generateTextChoices(textType, context);
    
    return {
      id: this.generateProceduralSceneId('text', context),
      type: SCENE_TYPES.TEXT,
      content: narrativeContent,
      choices: choices,
      metadata: {
        chapter: 'procedural',
        location: context.location || 'unknown',
        tags: ['procedural_text', textType],
        environment: context.biome || 'neutral'
      },
      generation: {
        template: textType,
        context: { ...context },
        generatedAt: Date.now()
      }
    };
  }

  /**
   * G√©n√®re une sc√®ne de dialogue proc√©durale
   * @param {string} dialogueType - Type de dialogue (npc_meeting, merchant_encounter, etc.)
   * @param {object} context - Contexte avec donn√©es du PNJ
   * @returns {object} Sc√®ne DIALOGUE g√©n√©r√©e
   */
  static generateDialogueScene(dialogueType, context = {}) {
    console.log(`üí¨ G√©n√©ration dialogue: ${dialogueType}`, context);
    
    const npc = context.npc || this.generateContextualNPC(context);
    const dialogueContent = this.generateDialogueContent(dialogueType, npc, context);
    const dialogueChoices = this.generateDialogueChoices(dialogueType, npc, context);
    
    return {
      id: this.generateProceduralSceneId('dialogue', context),
      type: SCENE_TYPES.DIALOGUE,
      content: dialogueContent,
      choices: dialogueChoices,
      npc: npc,
      metadata: {
        chapter: 'procedural',
        location: context.location || npc?.location || 'encounter',
        tags: ['procedural_dialogue', dialogueType, npc?.role || 'generic'],
        environment: context.biome || 'neutral'
      },
      generation: {
        template: dialogueType,
        context: { ...context },
        npc: npc,
        generatedAt: Date.now()
      }
    };
  }

  // === M√âTHODES UTILITAIRES PRIV√âES ===

  /**
   * G√©n√®re un seed reproductible bas√© sur le template et le contexte
   */
  static generateSeed(templateKey, context) {
    const contextString = JSON.stringify(context);
    const combined = templateKey + contextString + Date.now();
    return this.simpleHash(combined);
  }

  /**
   * S√©lectionne les √©l√©ments du template selon le contexte
   */
  static selectTemplateElements(template, context, seed) {
    const rng = this.createSeededRandom(seed);
    
    return {
      description: this.selectRandomWithSeed(template.descriptions || [], rng),
      encounter: this.selectContextualEncounter(template.encounters, context, rng),
      npc: this.selectContextualNPC(template.npcs, context, rng),
      rewards: this.selectRewards(template.rewards, context, rng)
    };
  }

  /**
   * Construit une sc√®ne conforme au UnifiedSceneSchema
   */
  static buildUnifiedScene(elements, context, seed) {
    const sceneId = this.generateProceduralSceneId(PROCEDURAL_TYPES.RANDOM_ENCOUNTER, context);
    
    return {
      id: sceneId,
      type: SCENE_TYPES.HUB, // ‚úÖ Type HUB pour d√©clencher le bon composant
      
      content: {
        text: elements.description || 'Une zone √† explorer s\'ouvre devant vous.',
        title: `${this.getBiomeTitle(context.biome || 'unknown')} - Exploration`,
        description: 'Zone g√©n√©r√©e proc√©duralement'
      },
      
      choices: this.generateExplorationChoices(elements, context),
      
      conditions: {
        show_if: 'true' // Toujours visible pour les sc√®nes proc√©durales
      },

      // ‚úÖ Donn√©es sp√©cifiques √† l'exploration - Format attendu par ExplorationScene
      exploration: {
        encounters: elements.encounter ? [elements.encounter] : [],
        npcs: elements.npc ? [elements.npc] : [],
        rewards: elements.rewards || [],
        biome: context.biome || 'unknown',
        // Ajouter les √©l√©ments pour le composant
        availableActions: ['explore', 'continue'],
        discoveredElements: []
      },

      metadata: {
        chapter: 'procedural',
        location: context.biome || 'generated_area',
        tags: ['procedural', 'exploration', context.difficulty || 'medium'],
        environment: context.biome || 'wilderness'
      }
    };
  }

  /**
   * G√©n√®re les choix pour une sc√®ne d'exploration
   */
  static generateExplorationChoices(elements, context) {
    const choices = [
      {
        text: 'üîç Explorer la zone',
        next: 'proc_explore_action',
        consequences: {
          // D√©clenche un √©v√©nement proc√©dural
        }
      }
    ];

    // Ajouter des choix contextuels selon les √©l√©ments disponibles
    if (elements.npc) {
      choices.push({
        text: `üí¨ Approcher ${elements.npc.name || 'l\'individu'}`,
        next: 'proc_npc_interaction'
      });
    }

    if (elements.encounter && elements.encounter.type === 'combat') {
      choices.push({
        text: '‚öîÔ∏è Se pr√©parer au combat',
        next: 'proc_combat_encounter'
      });
    }

    // Toujours permettre de continuer
    choices.push({
      text: '‚û°Ô∏è Continuer son chemin',
      next: 'continue_journey' // Retour √† la narration principale
    });

    return choices;
  }

  /**
   * S√©lectionne un √©l√©ment al√©atoire d'un tableau
   */
  static selectRandom(array) {
    if (!Array.isArray(array) || array.length === 0) return null;
    return array[Math.floor(Math.random() * array.length)];
  }

  /**
   * S√©lectionne un √©l√©ment selon des poids
   */
  static selectRandomWeighted(weightedArray) {
    const totalWeight = weightedArray.reduce((sum, item) => sum + item.weight, 0);
    let random = Math.random() * totalWeight;
    
    for (const item of weightedArray) {
      random -= item.weight;
      if (random <= 0) return item.type;
    }
    
    return weightedArray[0].type; // Fallback
  }

  /**
   * Hash simple pour g√©n√©rer des seeds reproductibles
   */
  static simpleHash(str) {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32bit integer
    }
    return Math.abs(hash);
  }

  /**
   * Cr√©e un g√©n√©rateur al√©atoire seed√©
   */
  static createSeededRandom(seed) {
    let state = seed;
    return () => {
      state = (state * 1664525 + 1013904223) % Math.pow(2, 32);
      return state / Math.pow(2, 32);
    };
  }

  /**
   * G√©n√®re une sc√®ne d'erreur en cas de probl√®me
   */
  static generateErrorScene(templateKey) {
    return {
      id: `error_${Date.now()}`,
      type: SCENE_TYPES.TEXT,
      content: {
        text: `Erreur de g√©n√©ration proc√©durale (template: ${templateKey}). Vous continuez votre chemin...`,
        title: 'Erreur de G√©n√©ration'
      },
      choices: [{
        text: 'Continuer',
        next: 'continue_journey'
      }],
      metadata: {
        tags: ['error', 'procedural']
      }
    };
  }

  // === M√âTHODES UTILITAIRES SUPPL√âMENTAIRES ===

  static hashContext(context) {
    const str = JSON.stringify(context);
    return this.simpleHash(str).toString(36).substr(2, 8);
  }

  static selectRandomWithSeed(array, rng) {
    if (!Array.isArray(array) || array.length === 0) return null;
    return array[Math.floor(rng() * array.length)];
  }

  static selectContextualEncounter(encounters, context, rng) {
    if (!encounters || !encounters[context.difficulty]) return null;
    return this.selectRandomWithSeed(encounters[context.difficulty], rng);
  }

  static selectContextualNPC(npcs, context, rng) {
    if (!npcs || !Array.isArray(npcs) || npcs.length === 0) {
      // G√©n√©rer un PNJ g√©n√©rique si aucun n'est d√©fini dans le template
      return this.generateGenericNPC('traveler');
    }
    return this.selectRandomWithSeed(npcs, rng);
  }

  static selectRewards(rewards, context, rng) {
    if (!rewards || !rewards[context.difficulty]) return [];
    return this.selectRandomWithSeed(rewards[context.difficulty], rng);
  }

  static generateNPCName() {
    const firstNames = ['Aldric', 'Brenna', 'Caius', 'Dara', 'Ewan', 'Fira', 'Gareth', 'Hilda'];
    const lastNames = ['Forgefer', 'Ventelame', 'Pierredor', 'Boisvert', 'Flammecoeur', 'Glacelune'];
    
    const firstName = this.selectRandom(firstNames);
    const lastName = this.selectRandom(lastNames);
    return `${firstName} ${lastName}`;
  }

  static generateGenericNPC(role) {
    return {
      role: role || 'traveler',
      personality: this.selectRandom(['friendly', 'neutral', 'suspicious', 'helpful']),
      name: this.generateNPCName(),
      description: 'Un individu que vous croisez sur votre chemin.'
    };
  }

  static generateGenericDialogue(npc) {
    // Utiliser les dialogues g√©n√©riques des templates
    return SceneTemplates.dialogues?.generic || [
      {
        text: 'Bonjour, voyageur. Comment puis-je vous aider ?',
        responses: [
          { text: 'Bonjour.', action: 'greet' },
          { text: 'Connaissez-vous les environs ?', action: 'ask_area' },
          { text: 'Bonne journ√©e.', action: 'leave' }
        ]
      }
    ];
  }

  static isDialogueRelevant(dialogue, playerContext) {
    // Logique pour d√©terminer si un dialogue est pertinent
    // Bas√© sur le niveau, la r√©putation, les qu√™tes actives, etc.
    return true; // Simplifi√© pour l'instant
  }

  /**
   * G√©n√®re un titre appropri√© pour le biome
   */
  static getBiomeTitle(biome) {
    // Utiliser les templates des sc√®nes pour g√©n√©rer des titres coh√©rents
    const templateKey = `${biome}_encounter_social`;
    const template = SceneTemplates[templateKey];
    
    if (template && template.descriptions) {
      // Extraire un titre naturel de la premi√®re description
      const description = template.descriptions[0];
      return description.split('.')[0] + '...';
    }
    
    // Fallback simple
    const simpleEmojis = { forest: 'üå≤', village: 'üèòÔ∏è', dungeon: 'üè∞', mountain: '‚õ∞Ô∏è', wilderness: 'üåø' };
    return `${simpleEmojis[biome] || '‚ùì'} Zone d'Exploration`;
  }

  // === M√âTHODES DE G√âN√âRATION DE CONTENU SP√âCIALIS√âES ===

  /**
   * S√©lectionne les ennemis appropri√©s selon le contexte et challengeRating
   */
  static selectEnemiesForEncounter(context) {
    const { biome = 'forest', difficulty = 'medium', playerLevel = 1 } = context;
    
    // D√©finir les CR appropri√©s selon la difficult√© et le niveau joueur
    const targetCRs = this.getTargetChallengeRatings(difficulty, playerLevel);
    
    // Filtrer les ennemis selon le biome et le CR
    const suitableEnemies = Object.entries(enemyTemplates).filter(([key, enemy]) => {
      return this.isEnemySuitableForContext(enemy, biome, targetCRs);
    });
    
    console.log(`üéØ Ennemis disponibles pour ${biome} (${difficulty}):`, suitableEnemies.map(([k,e]) => `${e.name} (CR ${e.challengeRating})`));
    
    if (suitableEnemies.length === 0) {
      console.warn('‚ö†Ô∏è Aucun ennemi adapt√©, utilisation des gobelins par d√©faut');
      return [{ id: 'gobelin', ...enemyTemplates.gobelin }];
    }
    
    // S√©lectionner 1-3 ennemis selon la difficult√©
    const enemyCount = this.getEnemyCount(difficulty);
    const selectedEnemies = [];
    
    for (let i = 0; i < enemyCount; i++) {
      const [enemyKey, enemyData] = this.selectRandom(suitableEnemies);
      selectedEnemies.push({ id: enemyKey, ...enemyData });
    }
    
    return selectedEnemies;
  }

  /**
   * D√©termine les Challenge Ratings cibles selon difficult√© et niveau
   */
  static getTargetChallengeRatings(difficulty, playerLevel) {
    const crMappings = {
      easy: ['1/8', '1/4'],
      medium: ['1/4', '1/2', '1'],
      hard: ['1/2', '1', '2'],
      deadly: ['1', '2', '3']
    };
    
    return crMappings[difficulty] || crMappings.medium;
  }

  /**
   * V√©rifie si un ennemi convient au contexte
   */
  static isEnemySuitableForContext(enemy, biome, targetCRs) {
    // V√©rifier le Challenge Rating
    if (!targetCRs.includes(enemy.challengeRating)) {
      return false;
    }
    
    // Associations biome -> IDs d'ennemis (utiliser les cl√©s de enemyTemplates)
    const biomeEnemies = {
      forest: ['gobelin', 'kobold', 'ombre', 'goule'],
      village: ['gobelin', 'mageNoir'],
      dungeon: ['squelette', 'goule', 'ombre', 'molosse_ombre', 'diablotin', 'diable', 'mageNoir'],
      mountain: ['kobold', 'gobelin'],
      wilderness: ['gobelin', 'kobold', 'ombre', 'mephiteBoueux']
    };
    
    // Si aucune restriction de biome, accepter tous les ennemis
    const allowedEnemyIds = biomeEnemies[biome];
    if (!allowedEnemyIds) return true;
    
    // Pour identifier l'ennemi, on utilise la propri√©t√© enemy.name directement
    // car on n'a pas l'ID de l'ennemi ici
    const enemyName = enemy.name?.toLowerCase() || '';
    
    // Mapping des noms d'ennemis vers leurs IDs
    const nameToId = {
      'gobelin': 'gobelin',
      'kobold': 'kobold', 
      'ombre': 'ombre',
      'goule': 'goule',
      'squelette': 'squelette',
      'molosse d\'ombre': 'molosse_ombre',
      'diablotin': 'diablotin',
      'diable √©pineux': 'diable',
      'mage noir': 'mageNoir',
      'm√©phite boueux': 'mephiteBoueux'
    };
    
    // Trouver l'ID correspondant au nom
    const enemyId = Object.entries(nameToId).find(([name, id]) => enemyName.includes(name))?.[1];
    
    return enemyId ? allowedEnemyIds.includes(enemyId) : false;
  }

  /**
   * D√©termine le nombre d'ennemis selon la difficult√©
   */
  static getEnemyCount(difficulty) {
    const counts = {
      easy: 1,
      medium: this.selectRandom([1, 2]),
      hard: this.selectRandom([2, 3]),
      deadly: this.selectRandom([3, 4])
    };
    return counts[difficulty] || 1;
  }

  /**
   * G√©n√®re les positions des ennemis sur la grille
   */
  static generateEnemyPositions(enemyCount) {
    const positions = [
      { x: 3, y: 2 },
      { x: 4, y: 3 },
      { x: 2, y: 3 },
      { x: 5, y: 2 },
      { x: 3, y: 4 }
    ];
    
    return positions.slice(0, enemyCount);
  }

  /**
   * G√©n√®re le contenu narratif pour un combat
   */
  static generateCombatNarrative(encounterType, context, enemies) {
    const narratives = {
      bandit_ambush: {
        title: 'Embuscade de Bandits',
        text: `Des bandits surgissent des buissons ! ${enemies.map(e => e.name).join(', ')} vous attaquent par surprise !`
      },
      beast_attack: {
        title: 'Attaque de Cr√©atures',
        text: `Des cr√©atures sauvages vous attaquent ! Vous devez vous d√©fendre contre ${enemies.map(e => e.name).join(', ')} !`
      },
      undead_encounter: {
        title: 'Rencontre Mort-Vivante',
        text: `Des mort-vivants √©mergent des ombres... ${enemies.map(e => e.name).join(', ')} r√¥dent vers vous !`
      }
    };
    
    return narratives[encounterType] || {
      title: 'Combat Inattendu',
      text: `Un combat se d√©clenche ! Vous affrontez ${enemies.map(e => e.name).join(', ')} !`
    };
  }

  /**
   * Calcule les r√©compenses selon les ennemis vaincus
   */
  static calculateCombatRewards(enemies, context) {
    const totalXP = enemies.reduce((sum, enemy) => sum + (enemy.xp || 0), 0);
    const baseGold = Math.floor(totalXP / 10); // 1 or par 10 XP
    
    const rewards = {
      experience: totalXP,
      gold: baseGold
    };
    
    // Ajouter des items selon le contexte
    if (context.biome === 'dungeon') {
      rewards.items = ['potion_guerison'];
    } else if (context.difficulty === 'hard') {
      rewards.items = ['piece_or', 'arme_simple'];
    }
    
    return rewards;
  }

  /**
   * G√©n√®re l'ID de sc√®ne post-combat
   */
  static generatePostCombatSceneId(context) {
    return 'proc_combat_victory'; // On g√©n√©rera cette sc√®ne √† la vol√©e
  }

  /**
   * G√©n√®re une sc√®ne post-combat compl√®te
   */
  static generatePostCombatScene(context, rewards) {
    // R√©cup√©rer l'ID du hub proc√©dural actuel depuis le contexte
    const currentHubId = context.currentHubId || context.originalHubId || context.sceneId;
    
    const victoryScene = {
      id: 'proc_combat_victory',
      type: SCENE_TYPES.TEXT,
      content: {
        title: 'üèÜ Victoire !',
        text: `Le combat est termin√© ! Vous fouillez le champ de bataille et trouvez quelques objets de valeur.
        
        ${rewards.experience ? `üí´ Vous gagnez ${rewards.experience} points d'exp√©rience !` : ''}
        ${rewards.gold ? `üí∞ Vous trouvez ${rewards.gold} pi√®ces d'or !` : ''}
        ${rewards.items ? `üéÅ Objets trouv√©s : ${rewards.items.join(', ')}` : ''}`
      },
      choices: [
        {
          text: 'üîç Continuer l\'exploration du hub',
          next: currentHubId // Retourner au hub proc√©dural actuel
        },
        {
          text: '‚û°Ô∏è Quitter cette zone',
          next: 'continue_journey'
        }
      ],
      metadata: {
        chapter: 'procedural',
        location: 'post_combat',
        tags: ['combat_victory', 'hub_return', 'procedural']
      }
    };

    // ‚úÖ La sc√®ne sera stock√©e via le syst√®me onVictory.generatedScene
    // Pas besoin de stocker ici, le syst√®me de combat s'en occupe

    return victoryScene;
  }

  /**
   * G√©n√®re du contenu textuel contextuel
   */
  static generateTextNarrative(textType, context) {
    // Utiliser les descriptions des templates existants
    const biome = context.biome || 'forest';
    const templateKey = `${biome}_encounter_discovery`;
    const template = SceneTemplates[templateKey] || SceneTemplates['forest_encounter_discovery'];
    
    if (template && template.descriptions) {
      return {
        title: 'R√©sultat d\'Exploration',
        text: this.selectRandom(template.descriptions)
      };
    }
    
    return {
      title: 'Continuation',
      text: 'Votre aventure continue...'
    };
  }

  /**
   * G√©n√®re les choix pour une sc√®ne textuelle
   */
  static generateTextChoices(textType, context) {
    // Choix g√©n√©riques pour retourner au hub ou continuer
    return [
      {
        text: 'üîç Explorer plus en d√©tail',
        action: 'explore_more'
      },
      {
        text: '‚Ü©Ô∏è Retour √† l\'exploration',
        action: 'return_hub'
      },
      {
        text: '‚û°Ô∏è Continuer son chemin',
        next: 'continue_journey'
      }
    ];
  }

  /**
   * G√©n√®re un PNJ contextuel
   */
  static generateContextualNPC(context) {
    // Utiliser les NPCs des templates existants
    const biome = context.biome || 'forest';
    const npcTemplate = SceneTemplates.npcs?.[biome] || SceneTemplates.npcs?.generic || [];
    
    if (npcTemplate.length > 0) {
      const baseNpc = this.selectRandom(npcTemplate);
      return {
        ...this.generateGenericNPC(baseNpc.role),
        personality: baseNpc.personality,
        knowledge: baseNpc.knowledge,
        services: baseNpc.services,
        location: context.biome
      };
    }
    
    return this.generateGenericNPC('traveler');
  }

  /**
   * G√©n√®re le contenu d'un dialogue
   */
  static generateDialogueContent(dialogueType, npc, context) {
    // Utiliser les dialogues des templates
    const role = npc.role || 'generic';
    const dialogues = SceneTemplates.dialogues?.[role] || SceneTemplates.dialogues?.generic || [];
    
    if (dialogues.length > 0) {
      const dialogue = this.selectRandom(dialogues);
      return {
        title: `Conversation avec ${npc.name}`,
        text: `${npc.name}: "${dialogue.text || npc.defaultDialogue || 'Bonjour, voyageur. Comment puis-je vous aider ?'}"`
      };
    }
    
    return {
      title: `Conversation avec ${npc.name}`,
      text: `${npc.name} vous regarde. "${npc.defaultDialogue || 'Bonjour, voyageur. Comment puis-je vous aider ?'}"`
    };
  }

  /**
   * G√©n√®re les choix d'un dialogue
   */
  static generateDialogueChoices(dialogueType, npc, context) {
    // Utiliser les choix des templates de dialogues
    const role = npc.role || 'generic';
    const dialogues = SceneTemplates.dialogues?.[role] || SceneTemplates.dialogues?.generic || [];
    
    if (dialogues.length > 0) {
      const dialogue = this.selectRandom(dialogues);
      if (dialogue.responses) {
        return dialogue.responses.map(response => ({
          text: response.text,
          action: response.action
        }));
      }
    }
    
    // Fallback vers des choix g√©n√©riques
    return [
      {
        text: 'Demander des informations',
        action: 'ask_info'
      },
      {
        text: 'Proposer un √©change',
        action: 'trade'
      },
      {
        text: 'Saluer et partir',
        action: 'leave'
      }
    ];
  }

  /**
   * G√©n√®re une sc√®ne de rencontre al√©atoire (template virtuel)
   * Utilis√© quand on veut une sc√®ne hub d√©j√† g√©n√©r√©e pr√©c√©demment
   */
  static generateRandomEncounterScene(context) {
    console.log('üé≤ G√©n√©ration de sc√®ne de rencontre al√©atoire:', context);
    
    // Utiliser un template r√©el selon le biome
    const biome = context.biome || 'forest';
    const availableTemplates = Object.keys(SceneTemplates).filter(key => 
      key.startsWith(`${biome}_encounter_`)
    );
    
    if (availableTemplates.length === 0) {
      // Fallback vers forest
      const fallbackTemplate = 'forest_encounter_social';
      console.log(`‚ö†Ô∏è Pas de template pour ${biome}, utilisation de ${fallbackTemplate}`);
      return this.generateScene(fallbackTemplate, { ...context, biome: 'forest' });
    }
    
    // Choisir un template al√©atoirement
    const selectedTemplate = this.selectRandom(availableTemplates);
    console.log(`‚ú® Template s√©lectionn√© pour rencontre al√©atoire: ${selectedTemplate}`);
    
    return this.generateScene(selectedTemplate, context);
  }

  /**
   * Groupe les ennemis identiques pour EnemyFactory
   * Convertit ['gobelin', 'gobelin', 'ombre'] ‚Üí [{type: 'gobelin', count: 2}, {type: 'ombre', count: 1}]
   */
  static groupEnemiesByType(enemies) {
    const grouped = {};
    
    enemies.forEach(enemy => {
      if (grouped[enemy.id]) {
        grouped[enemy.id].count++;
      } else {
        grouped[enemy.id] = {
          type: enemy.id,
          count: 1
        };
      }
    });
    
    return Object.values(grouped);
  }
}